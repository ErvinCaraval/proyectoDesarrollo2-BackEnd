name: CI/CD

on:
  pull_request:
    branches:
      - main

jobs:
  test-and-analyze:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Build and run tests using Docker Compose
        run: docker-compose -f docker-compose.yaml up --build -d db web tests

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: ./coverage.xml

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@v2.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build_and_push:
    needs: test-and-analyze
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build and push images
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          docker-compose build
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker-compose push

  deploy-to-cluster:
    needs: build_and_push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Minikube
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube

      - name: Start Minikube
        run: |
          minikube start --driver=docker

      - name: Create namespace if not exists
        uses: steebchen/kubectl@v2.0.0
        with:
          args: create namespace backend --dry-run=client -o yaml | kubectl apply -f -
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}

      - name: Apply ConfigMap
        uses: steebchen/kubectl@v2.0.0
        with:
          args: apply -f .github/manifests/configmap.yaml -n backend
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}

      - name: Apply database deployment
        uses: steebchen/kubectl@v2.0.0
        with:
          args: apply -f .github/manifests/db-deployment.yaml -n backend
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}

      - name: Apply web deployment
        uses: steebchen/kubectl@v2.0.0
        with:
          args: apply -f .github/manifests/web-deployment.yaml -n backend
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}

      - name: Apply web service
        uses: steebchen/kubectl@v2.0.0
        with:
          args: apply -f .github/manifests/web-service.yaml -n backend
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}

      - name: Verify deployment - Port Forwarding
        run: kubectl port-forward service/web-service 30130:3120 -n backend
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}

      - name: Get nodes
        run: kubectl get nodes
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}

      - name: Get pods
        run: kubectl get pods -n backend
        env:
          KUBECONFIG: ${{ secrets.KUBECONFIG }}
